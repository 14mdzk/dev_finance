// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/transaction_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/14mdzk/dev_finance/internal/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockITransactionRepository is a mock of ITransactionRepository interface.
type MockITransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepositoryMockRecorder
}

// MockITransactionRepositoryMockRecorder is the mock recorder for MockITransactionRepository.
type MockITransactionRepositoryMockRecorder struct {
	mock *MockITransactionRepository
}

// NewMockITransactionRepository creates a new mock instance.
func NewMockITransactionRepository(ctrl *gomock.Controller) *MockITransactionRepository {
	mock := &MockITransactionRepository{ctrl: ctrl}
	mock.recorder = &MockITransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepository) EXPECT() *MockITransactionRepositoryMockRecorder {
	return m.recorder
}

// Browse mocks base method.
func (m *MockITransactionRepository) Browse(userID int) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Browse", userID)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Browse indicates an expected call of Browse.
func (mr *MockITransactionRepositoryMockRecorder) Browse(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Browse", reflect.TypeOf((*MockITransactionRepository)(nil).Browse), userID)
}

// BrowseByTransactionType mocks base method.
func (m *MockITransactionRepository) BrowseByTransactionType(userID, transactionType int) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BrowseByTransactionType", userID, transactionType)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseByTransactionType indicates an expected call of BrowseByTransactionType.
func (mr *MockITransactionRepositoryMockRecorder) BrowseByTransactionType(userID, transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseByTransactionType", reflect.TypeOf((*MockITransactionRepository)(nil).BrowseByTransactionType), userID, transactionType)
}

// Create mocks base method.
func (m *MockITransactionRepository) Create(userID int, transaction model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITransactionRepositoryMockRecorder) Create(userID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionRepository)(nil).Create), userID, transaction)
}

// Delete mocks base method.
func (m *MockITransactionRepository) Delete(userID, transactionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITransactionRepositoryMockRecorder) Delete(userID, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITransactionRepository)(nil).Delete), userID, transactionID)
}

// GetByID mocks base method.
func (m *MockITransactionRepository) GetByID(userID, transactionID int) (model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, transactionID)
	ret0, _ := ret[0].(model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITransactionRepositoryMockRecorder) GetByID(userID, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITransactionRepository)(nil).GetByID), userID, transactionID)
}

// Update mocks base method.
func (m *MockITransactionRepository) Update(userID, transactionID int, transaction model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, transactionID, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITransactionRepositoryMockRecorder) Update(userID, transactionID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITransactionRepository)(nil).Update), userID, transactionID, transaction)
}
